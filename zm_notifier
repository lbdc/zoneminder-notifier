#!/usr/bin/env python

import sys
import time
from datetime import datetime, timedelta
import subprocess
import ConfigParser
import zm_util
from zm_api import ZMAPI

def notify_new_event(addr, monitor, msg_file, img_file, img_url,
                     detected_objects=None):
    # Sends notification email using mutt

    # Format subject and body of message 

    subject = "ZoneMinder alarm"

    obj_string = ""
    if detected_objects is not None:
        for obj in detected_objects:
            for key, value in obj.iteritems():
                obj_string += "{:s}: {:.0f}%\n".format(key, value*100.)
        obj_string.rstrip('\n')

    message = "Motion detected by {:s}.\n".format(monitor['name'])
    message += "Event {:d}\n".format(monitor['last_eventid'])
    if len(obj_string) > 0:
        message += obj_string
    if not addr['mms']:
        message += img_url

    # Write message file

    try:
        f = open(msg_file, 'w')
    except IOError:
        zm_util.debug("Cannot write to {:s}.\n".format(msg_file), "stderr")
        return
    f.write(message)
    f.close()

    # Send message

    try:
        stdin_file = open(msg_file)
    except IOError:
        zm_util.debug("Cannot open {:s}.\n".format(msg_file), "stderr")
        return
    if addr['mms']:
        subprocess.call(['mutt', '-s', subject, '-a', img_file, "--",
                        addr["address"]], stdin=stdin_file)
    else:
        subprocess.call(['mutt', '-s', subject, addr["address"]],
                        stdin=stdin_file)
    stdin_file.close()

if __name__ == "__main__":

    # Read config file

    config = ConfigParser.ConfigParser()
    config_file = '/etc/zm_notifier.cfg'
    try:
        f = open(config_file)
    except IOError:
        zm_util.debug("Error opening {:s}".format(config_file), "stderr")
        sys.exit(1)
    if len(config.read(config_file)) == 0:
        zm_util.debug("Error parsing {:s}".format(config_file), "stderr")
        sys.exit(1)

    for section in ["ZoneMinderAPI", "Email", "Daemon", "Detection"]:
        if not config.has_section(section):
            zm_util.debug("No section {:s} found in {:s}".format(section,
                          config_file), "stderr")
            sys.exit(1)

    # ZoneMinderAPI settings

    local_server_address = zm_util.get_from_config(config, "ZoneMinderAPI",
                                                   "local_server_address")
    world_server_address = zm_util.get_from_config(config, "ZoneMinderAPI",
                                                   "world_server_address")
    username = zm_util.get_from_config(config, "ZoneMinderAPI", "username")
    password = zm_util.get_from_config(config, "ZoneMinderAPI", "password")
    verify_ssl = zm_util.get_bool_from_config(config, "ZoneMinderAPI",
                                     "verify_ssl", required=False, default=True)

    # Email settings
    
    tmp_message_file = zm_util.get_from_config(config, "Email",
                           "tmp_message_file", False, "/tmp/zm_event_email.txt")
    tmp_image_file = zm_util.get_from_config(config, "Email", "tmp_image_file",
                                             False, "/tmp/zm_event_image.txt")
    
    addresses = zm_util.get_from_config(config, "Email", "addresses")
    attach_image = zm_util.get_from_config(config, "Email", "attach_image")
    addresses = addresses.replace(" ","")
    addrs = addresses.split(",")
    attach_image = attach_image.replace(" ","")
    imgs = attach_image.split(",")
    if len(addrs) != len(imgs):
        zm_util.debug("Must specify attach_image for each address", "stderr")
        sys.exit(1)

    naddrs = len(addrs)
    toaddrs = []
    for i in range(naddrs):
        toaddr = {"address": addrs[i]}
        if (imgs[i] == "Yes") or (imgs[i] == "True"):
            toaddr["mms"] = True
        elif (imgs[i] == "No") or (imgs[i] == "False"):
            toaddr["mms"] = False
        else:
            zm_util.debug("attach_image must be Yes/True/No/False", "stderr")
            sys.exit(1)
        toaddrs.append(toaddr)

    # Daemon settings

    running_timeout = zm_util.get_int_from_config(config, "Daemon",
                                   "running_timeout", required=False, default=3)
    stopped_timeout = zm_util.get_int_from_config(config, "Daemon",
                                   "stopped_timeout", required=False, default=3)
    login_refresh = zm_util.get_int_from_config(config, "Daemon",
                                  "login_refresh", required=False, default=1200)
    notify_incomplete = zm_util.get_bool_from_config(config, "Daemon",
                      "notify_incomplete_events", required=False, default=False)

    # Detection settings

    detect_objects = zm_util.get_bool_from_config(config, "Detection",
                                 "detect_objects", required=False, default=True)
    detection_suspend = zm_util.get_int_from_config(config, "Detection",
                                 "detection_suspend", required=False, default=0)
    if detect_objects:
        detect_classes = zm_util.get_from_config(config, "Detection",
                             "detect_classes", required=False, default="person")
        detect_classes = detect_classes.replace(" ","")
        detect_classes = detect_classes.split(",")
        img_width = zm_util.get_int_from_config(config, "Detection",
                                       "img_width", required=False, default=416)
        img_height = zm_util.get_int_from_config(config, "Detection",
                                      "img_height", required=False, default=416)
        conf_threshold = zm_util.get_float_from_config(config, "Detection",
                                 "conf_threshold", required=False, default=0.25)
        detection_config = zm_util.get_from_config(config, "Detection",
                                                   "detection_config")
        detection_weights = zm_util.get_from_config(config, "Detection",
                                                   "detection_weights")
        detection_names = zm_util.get_from_config(config, "Detection",
                                                   "detection_names")

    any_mms = False
    for addr in toaddrs:
        if addr['mms']:
            any_mms = True
            break

    # Disable detection and image attachments if notify_incomplete is enabled

    if notify_incomplete:
        if any_mms:
            zm_util.debug("notify_incomplete_events disables image attachment.")
            any_mms = False
            for addr in toaddrs:
                addr['mms'] = False
        if detect_objects:
            zm_util.debug("notify_incomplete_events disables object detection.")
            detect_objects = False

    # Set up object detection

    if detect_objects:
        from zm_object_detection import Detector
        detector = Detector(img_width, img_height, conf_threshold)

        if not detector.setup(detection_config, detection_weights,
                              detection_names):
            sys.exit(1)

    # Login and store last login time

    zm = ZMAPI(local_server_address, username, password, verify_ssl)
    if not zm.login():
        sys.exit(1)
    last_login_time = datetime.now()
    last_detection_time = datetime.now()
    zm_util.debug("Successful login")

    rebuild_monitors = True
    last_status = "Not running"
    while 1:

        sys.stdout.flush()
        sys.stderr.flush()

        # Login again if necessary to keep session active

        current_time = datetime.now()
        if current_time - last_login_time > timedelta(seconds=login_refresh):
            if not zm.login():
                sys.exit(1)
            last_login_time = datetime.now()

        # Check if ZoneMinder is running

        if zm.getDaemonStatus():

            if last_status == "Not running":
                zm_util.debug("ZoneMinder is now running.")
                last_status = "Running"

                # Pause to ensure monitors are up by the time we query them

                time.sleep(stopped_timeout)

            # Get list of monitors

            if rebuild_monitors:
                rebuild_monitors = False
                monitors = zm.getMonitors(active_only=True)

                # Get last event information for each monitor
                for monitor in monitors:
                    monitor['last_eventid'], monitor['maxscore_frameid'] = \
                        zm.getMonitorLatestEvent(monitor['id'])

            for monitor in monitors:
                if not zm.getMonitorDaemonStatus(monitor['id']):
                    zm_util.debug("Warning: monitor {:s} has dropped out"\
                                  .format(monitor['name'], "stderr"))
                    rebuild_monitors = True
                    continue

                # Check for new event and send alert

                last_eventid, maxscore_frameid = \
                    zm.getMonitorLatestEvent(monitor['id'],
                                             not notify_incomplete)
                if last_eventid == 0:
                    continue
                if last_eventid != monitor['last_eventid']:
                    monitor['last_eventid'] = last_eventid
                    monitor['maxscore_frameid'] = maxscore_frameid
                    if notify_incomplete:
                        img_url = zm.getMaxScoreURL(monitor['last_eventid'])
                    else:
                        img_url = zm.getFrameURL(monitor['maxscore_frameid'])
                    img_url = img_url.replace(local_server_address,
                                              world_server_address)

                    if any_mms or detect_objects:
                        zm.getFrameImage(monitor['maxscore_frameid'],
                                         tmp_image_file)

                    current_time = datetime.now()
                    detection_suspended = current_time - last_detection_time \
                                        < timedelta(seconds=detection_suspend)

                    # Do object detection

                    matches = None
                    if detect_objects and not detection_suspended:
                        if detector.detect(tmp_image_file, detect_classes):
                            matches = detector.matches()
                            nmatches = len(matches)
                            if nmatches == 0:
                                msg = "No requested classes detected for "\
                                    + "event {:d}\nProcessing time: {:.2f}"\
                                    .format(last_eventid,
                                            detector.detectionTime())
                                zm_util.debug(msg)
                                continue    # Don't send alert
                            else:
                                detected_list = ""
                                for match in matches:
                                    for key in match:
                                        detected_list += key + ", "
                                detected_list = detected_list.rstrip(", ")
                                msg = "Detected " + detected_list + " in "\
                                    + "{:.2f} seconds"\
                                    .format(detector.detectionTime())
                                zm_util.debug(msg)
                                last_detection_time = datetime.now()

                    zm_util.debug("Sending event alerts for event {:d}"\
                          .format(last_eventid))
                    for addr in toaddrs:
                        notify_new_event(addr, monitor, tmp_message_file,
                                         tmp_image_file, img_url, matches)

            # Wait longer for new monitors to possibly come online

            if rebuild_monitors:
                time.sleep(stopped_timeout)
            else:
                time.sleep(running_timeout)

        else:

            if last_status == "Running":
                zm_util.debug("ZoneMinder is no longer running.")
                last_status = "Not running"

            rebuild_monitors = True
            time.sleep(stopped_timeout)

    zm.logout()
